<?php

Cross-Site Request Forgery（CSRF），中文一般译作跨站请求伪造。
经常入选owasp漏洞列表Top10，在当前web漏洞排行中，与XSS和SQL注入并列前三。与前两者相比，CSRF相对来说受到的关注要小很多，但是危害却非常大。

有三种方法被广泛用来防御CSRF攻击：
	验证token
	验证HTTP请求的Referer
	还有验证XMLHttpRequests里的自定义header


1、网络连接。
		例如，如果攻击者无法直接访问防火墙内的资源，他可以利用防火墙内用户的浏览器间接的对他所想访问的资源发送网络请求。
		甚至还有这样一种情况，攻击者为了绕过基于IP地址的验证策略，利用受害者的IP地址来发起他想发起的请求。

2、获知浏览器的状态。
		当浏览器发送请求时，通常情况下，网络协议里包含了浏览器的状态。这其中包括很多，比如cookie，客户端证书或基于身份验证的header。
		因此，当攻击者借助浏览器向需要上述这些cookie，证书和header等作验证的站点发送请求的时候，站点则无法区分真实用户和攻击者。

3、改变浏览器的状态。
		当攻击者借助浏览器发起一个请求的时候，浏览器也会分析并相应服务端的response。
		举个例子，如果服务端的response里包含有一个Set-Cookie的header，浏览器会相应这个Set-Cookie，并修改存储在本地的cookie。
		这些改动都会导致很微妙的攻击，我们将在第三部分描述。

作用范围内的威胁：我们按照产生危害的大小将此部分分成三种不同的危害模型。

1、论坛可交互的地方。
		很多网站，比如论坛允许用户自定义有限种类的内容。
		举例来说，通常情况下，网站允许用户提交一些被动的如图像或链接等内容。
		如果攻击者让图像的url指向一个恶意的地址，那么本次网络请求很有可能导致CSRF攻击。
		这些地方都可以发起请求，但这些请求不能自定义HTTP header，而且必须使用GET方法。
		尽管HTTP协议规范要求请求不能带有危害，但是很多网站并不符合这一要求。

2、Web攻击者。在这里web攻击者的定义是指有自己的独立域名的恶意代理，
		比如attacker.com，并且拥有attacker.com的HTTPS证书和web服务器。
		所有的这些功能只需要花10美元即可以做到。
		一旦用户访问attacker.com，攻击者就可以同时用GET和POST方法发起跨站请求，即为CSRF攻击。

3、网络攻击者。
		这里的网络攻击者指的是能控制用户网络连接的恶意代理。
		比如，攻击者可以通过控制无线路由器或者DNS服务器来控制用户的网络连接。
		这种攻击比web攻击需要更多的资源和准备，但我们认为这对HTTPS站点也有威胁。因
		为HTTPS站点只能防护有源网络。

 

作用范围外的威胁：下面我们还列出了一些不在本论文讨论范围的相关危害模型。对这些危害的防御措施可以与CSRF的防御措施形成很好的互补。

1、跨站脚本（XSS）。
		如果攻击者能够向网站注入脚本，那么攻击者就会破坏该网站用户会话的完整性和保密性。
		有些XSS攻击需要发起网络请求，比如将用户银行账户里的钱转移到攻击者的账户里，但是通常情况下，对CSRF的防御并没有考虑到这些情况。
		考虑到更安全的做法，网站必须实现对XSS和CSRF的同时防御。

2、恶意软件。
		如果攻击者能够在用户的电脑上运行恶意软件，那么攻击者就可以控制用户的浏览器向那些可信的网站注入脚本。
		这时候基于浏览器的防御策略将会失效，因为攻击者可以用含有恶意插件的浏览器来替换用户的浏览器。

3、DNS的重新绑定。
		像CSRF一样，DNS重新绑定可以使用用户的IP地址来连接攻击者指定的服务器。
		处在防火墙保护内的服务器或者那些基于IP地址验证的服务器需要一个对抗DNS重新绑定的防御方案。
		尽管DNS重新绑定的攻击和CSRF攻击的意图非常相似，但是他们还是需要各自不同的解决方案。
		一个简单的解决DNS重新绑定攻击的方案就是要验证主机的HTTP请求header，确保包含有预期值。
		还有一个替代方案就是过滤DNS流量，防止将外部的DNS名称解析成内部私有地址。

4、证书错误。
		如果用户在出现HTTPS证书错误的时候还愿意继续点击访问，那么HTTPS能够提供的很多安全保护就没有意义。
		有一些安全研究者指出了针对这一种情况的威害，但是在本文中，我们假设用户不会在出现了HTTPS证书错误之后继续点击访问。

5、钓鱼。
	当用户在访问钓鱼网站的时候，在身份验证的时候输入个人信息，钓鱼攻击就发生了。
	钓鱼攻击现今非常普遍也很有效，因为用户有的时候真的很难区分钓鱼网站和真正的网站。

6、用户跟踪。
		一些合作网站会利用跨站请求来对用户的浏览习惯建立一个关联行为库。
		大多数浏览器都通过组织第三方cookie发送来阻止类似的跟踪，但是利用挂站请求，浏览器的这一特性可以被绕过。